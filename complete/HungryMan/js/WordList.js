/*=================================================================================================
-- WordList Class
	This class creates a list of over 1000 words and manages access to those words
=================================================================================================*/

/*=================================================================================================
-- NAMESPACE INITIALISATION
	In JavaScript a 'namespace' is an object in which we define other objects. The reason for
	doing this is to avoid any identifier names used in a script from 'clashing' with the same
	names used in another script. This is particularly important when defining classes, as it
	ensures all of the classes method and property names are unique, even if the same identifiers
	are used in another class or script.
	
	It's common to use a reversed domain name as a namespace - this is because you can
	be very sure that other developers won't have used your domain name as a namespace for their
	classes. Here we're using "com.flametreepublishing.cfk" as our namespace. Subsequent class
	method definitions are then assigned to this com.flametreepublishing.cfk object.
-------------------------------------------------------------------------------------------------*/
var com;
if (!com) {
	com = new Object();
}
if (!com.flametreepublishing) {
	com.flametreepublishing = new Object();
}
if (!com.flametreepublishing.cfk) {
	com.flametreepublishing.cfk = new Object();
}
/*===============================================================================================*/

/*=================================================================================================
-- CONSTRUCTOR
	The constructor creates a new instance of the WordList class.
	
	Classes always have a 'constructor' method. This is the method that's called when a new
	instance of the class is created with the 'new' keyword.
	
	The 'this' keyword, that you see used througout this script, is a reference to the instance
	of the class that's handling the method or stores the property value - I.E. the object itself.
-------------------------------------------------------------------------------------------------*/
com.flametreepublishing.cfk.WordList = function() {
	//words is the array of words that the game chooses from
	this.words = this.getWordList();
	//usedWords is an array of indexes for any words that have already been used in the current
	//play session. The indexes are relative to the words array
	this.usedWords = new Array();
}
/*===============================================================================================*/

/*=================================================================================================
-- METHOD: getRandomWord():String
	This method returns a random word from the list, whilst ensuring that the word has not
	previously been returned during this play session.
-------------------------------------------------------------------------------------------------*/
com.flametreepublishing.cfk.WordList.prototype.getRandomWord = function() {
	//Calculate a random index between 0 and the length of the words array
	var randomIndex = Math.floor(Math.random() * this.words.length);
	//Use a while loop to see if randomIndex exists in the usedWords array. If so randomIndex is
	//regenerated and retested; the loop will continue to run until an unused word is found
	while (this.indexHasBeenUsed(randomIndex)) {
		randomIndex = Math.floor(Math.random() * this.words.length);
	}
	//Add the randomIndex to the usedWords array
	this.usedWords.push(randomIndex);
	//Return the word located at randomIndex in the words array
	return(this.words[(randomIndex)]);
}
/*===============================================================================================*/

/*=================================================================================================
-- METHOD: getLongestWordLength():Number
	This method looks through the words array and returns the length of the longest word it
	contains. The method is not actually used in the game, and is an example of a method that was
	written and included to aid with development rather than for actual gameplay purposes
-------------------------------------------------------------------------------------------------*/
com.flametreepublishing.cfk.WordList.prototype.getLongestWordLength = function() {
	//Declare a variable to store the result of the method, and initialise it to 0
	var theResult = 0;
	//Loop through the words array
	for(var i = 0; i < this.words.length; i++) {
		//Check the length of the word at index i against the method's result value
		if (this.words[i].length > theResult) {
			//If the word length is higher than any word length found so far, assign this lenght
			//to the method's result. In this way, every time a longer word is encountered the
			//method's result will be updated
			theResult = this.words[i].length;
		}
	}
	//Return the method's result
	return(theResult);
}
/*===============================================================================================*/

/*=================================================================================================
-- METHOD: indexHasBeenUsed(aIndex:Number):Boolen
	This method checks to see if a given index of the words array has already been used during the
	current game sessions. The index to check is captured as the aIndex parameter.
	
	Returns true if the index has been used, otherwise false
-------------------------------------------------------------------------------------------------*/
com.flametreepublishing.cfk.WordList.prototype.indexHasBeenUsed = function(aIndex) {
	//Declare a variable to store the method's result, and initialise to false
	var theResult = false;
	//Loop through the usedWords array
	for(var i = 0; i < this.usedWords.length; i++) {
		//Compare the element of the usedWords array currently being tested against aIndex
		if (this.usedWords[i] == aIndex) {
			//The index has been used, so set the method's result to true
			theResult = true;
			//Now we know the method's result is true there's no need to continue to loop through
			//the usedWords array, so break from the for loop
			break;
		}
	}
	//Return the method's result
	return(theResult);
}


/*=================================================================================================
-- METHOD: getWordList():Array
	There are a number of different ways to load supporting data into a script. If working from a
	server then it's common to transfer data from server to script using XML or JSON notation.
	This technique of importing data into a script is often referred to as 'side-loading'.
	
	Browser security makes it difficult to side-load data from a local hard drive. Therefore,
	rather than creating a word list as XML or JSON data, we've created it as a script that adds
	lots of words to an array which is then returned to the calling function.
-------------------------------------------------------------------------------------------------*/
com.flametreepublishing.cfk.WordList.prototype.getWordList = function() {
	//Create an empty array in which to store the words
	var theList = new Array();
	//Add lots of words to the list!
	//If you wish to add some words of your own then scroll to the bottom and add them using the
	//same theList.push() method call as we've used.
	theList.push("ability");
	theList.push("absorb");
	theList.push("accuse");
	theList.push("active");
	theList.push("actual");
	theList.push("advantage");
	theList.push("abvice");
	theList.push("arrange");
	theList.push("arctic");
	theList.push("attract");
	theList.push("average");
	theList.push("avoid");
	theList.push("access");
	theList.push("accord");
	theList.push("accordingly");
	theList.push("accordian");
	theList.push("abseil");
	theList.push("abseiling");
	theList.push("avoding");
	theList.push("avoidable");
	theList.push("actually");
	theList.push("accessing");
	theList.push("across");
	theList.push("acrobat");
	theList.push("acrobatic");
	theList.push("antarctic");
	theList.push("bold");
	theList.push("border");
	theList.push("brilliant");
	theList.push("baby");
	theList.push("bread");
	theList.push("bottom");
	theList.push("betting");
	theList.push("blowing");
	theList.push("backward");
	theList.push("battle");
	theList.push("brittle");
	theList.push("bottle");
	theList.push("broken");
	theList.push("breaking");
	theList.push("belch");
	theList.push("belching");
	theList.push("beauty");
	theList.push("beautiful");
	theList.push("bobsleigh");
	theList.push("bobble");
	theList.push("bubble");
	theList.push("bubbling");
	theList.push("breathe");
	theList.push("breathing");
	theList.push("beating");
	theList.push("beaten");
	theList.push("below");
	theList.push("bulging");
	theList.push("boxer");
	theList.push("boxing");
	theList.push("bulldozer");
	theList.push("buzzing");
	theList.push("busses");
	theList.push("capture");
	theList.push("certain");
	theList.push("clever");
	theList.push("climate");
	theList.push("chill");
	theList.push("coast");
	theList.push("consider");
	theList.push("confess");
	theList.push("contain");
	theList.push("continent");
	theList.push("convince");
	theList.push("coward");
	theList.push("crumple");
	theList.push("custom");
	theList.push("crazy");
	theList.push("crackers");
	theList.push("cablecar");
	theList.push("civil");
	theList.push("civility");
	theList.push("concrete");
	theList.push("convex");
	theList.push("converge");
	theList.push("converging");
	theList.push("complex");
	theList.push("cowardly");
	theList.push("convinced");
	theList.push("convincing");
	theList.push("crumpled");
	theList.push("crumpling");
	theList.push("crumpets");
	theList.push("cracking");
	theList.push("cracked");
	theList.push("captured");
	theList.push("capturing");
	theList.push("decay");
	theList.push("delay");
	theList.push("defend");
	theList.push("delicate");
	theList.push("device");
	theList.push("diagram");
	theList.push("division");
	theList.push("disease");
	theList.push("distant");
	theList.push("drifting");
	theList.push("delaying");
	theList.push("daisies");
	theList.push("daisy");
	theList.push("daffodil");
	theList.push("defended");
	theList.push("defender");
	theList.push("double");
	theList.push("darkness");
	theList.push("dribble");
	theList.push("dribbling");
	theList.push("dovetail");
	theList.push("distances");
	theList.push("distinctive");
	theList.push("distinct");
	theList.push("dreadful");
	theList.push("ducks");
	theList.push("ducking");
	theList.push("ducked");
	theList.push("dewdrop");
	theList.push("deliver");
	theList.push("delivering");
	theList.push("delivered");
	theList.push("dumping");
	theList.push("dumped");
	theList.push("doubled");
	theList.push("doubling");
	theList.push("destroy");
	theList.push("destroying");
	theList.push("destroyed");
	theList.push("elegant");
	theList.push("echoes");
	theList.push("examine");
	theList.push("exactly");
	theList.push("easier");
	theList.push("easiest");
	theList.push("explore");
	theList.push("explorer");
	theList.push("exploring");
	theList.push("extend");
	theList.push("explain");
	theList.push("extending");
	theList.push("effect");
	theList.push("effective");
	theList.push("editor");
	theList.push("editing");
	theList.push("extended");
	theList.push("explained");
	theList.push("explaining");
	theList.push("election");
	theList.push("elected");
	theList.push("electric");
	theList.push("electricity");
	theList.push("electrical");
	theList.push("ecstatic");
	theList.push("elastic");
	theList.push("elasticity");
	theList.push("ending");
	theList.push("eleven");
	theList.push("eight");
	theList.push("eighteen");
	theList.push("eighty");
	theList.push("examined");
	theList.push("examination");
	theList.push("examiner");
	theList.push("exclaim");
	theList.push("exclaimed");
	theList.push("exclaiming");
	theList.push("evicts");
	theList.push("evicting");
	theList.push("evicted");
	theList.push("eventual");
	theList.push("eventually");
	theList.push("events");
	theList.push("extreme");
	theList.push("extremely");
	theList.push("eloquent");
	theList.push("eloquently");
	theList.push("eclipse");
	theList.push("eclipsing");
	theList.push("external");
	theList.push("externally");
	theList.push("fierce");
	theList.push("fatal");
	theList.push("fatality");
	theList.push("fortune");
	theList.push("fortunate");
	theList.push("flutter");
	theList.push("fluttering");
	theList.push("forbidden");
	theList.push("forbidding");
	theList.push("favour");
	theList.push("favourable");
	theList.push("favorite");
	theList.push("flavour");
	theList.push("flavouring");
	theList.push("flavoured");
	theList.push("fortify");
	theList.push("fortification");
	theList.push("five");
	theList.push("fifty");
	theList.push("fifteen");
	theList.push("four");
	theList.push("forty");
	theList.push("fourteen");
	theList.push("focus");
	theList.push("focussing");
	theList.push("flowers");
	theList.push("flowering");
	theList.push("flowered");
	theList.push("fools");
	theList.push("foolish");
	theList.push("foolishly");
	theList.push("fooling");
	theList.push("fooled");
	theList.push("fantasy");
	theList.push("fantastic");
	theList.push("fantastically");
	theList.push("fables");
	theList.push("fabled");
	theList.push("foxtrot");
	theList.push("faked");
	theList.push("flakey");
	theList.push("flaked");
	theList.push("flaking");
	theList.push("forest");
	theList.push("foreground");
	theList.push("flops");
	theList.push("flopping");
	theList.push("floppy");
	theList.push("flopped");
	theList.push("false");
	theList.push("falsify");
	theList.push("falsified");
	theList.push("falsely");
	theList.push("function");
	theList.push("functions");
	theList.push("functioned");
	theList.push("functioning");
	theList.push("gasp");
	theList.push("gasping");
	theList.push("gasped");
	theList.push("grasp");
	theList.push("grasped");
	theList.push("grasping");
	theList.push("grass");
	theList.push("grassy");
	theList.push("grasses");
	theList.push("glides");
	theList.push("gliding");
	theList.push("glided");
	theList.push("globe");
	theList.push("global");
	theList.push("globally");
	theList.push("glows");
	theList.push("glowed");
	theList.push("glowing");
	theList.push("grace");
	theList.push("graceful");
	theList.push("gracefully");
	theList.push("gradual");
	theList.push("gradually");
	theList.push("ginger");
	theList.push("gingerly");
	theList.push("gallops");
	theList.push("galloping");
	theList.push("galloped");
	theList.push("grades");
	theList.push("graded");
	theList.push("grading");
	theList.push("golden");
	theList.push("garden");
	theList.push("gardening");
	theList.push("gardener");
	theList.push("guess");
	theList.push("guesses");
	theList.push("guessing");
	theList.push("guessed");
	theList.push("gabble");
	theList.push("gabbling");
	theList.push("gabbled");
	theList.push("govern");
	theList.push("government");
	theList.push("governing");
	theList.push("governed");
	theList.push("governs");
	theList.push("great");
	theList.push("greatful");
	theList.push("greatfully");
	theList.push("grated");
	theList.push("grates");
	theList.push("grass");
	theList.push("grasses");
	theList.push("grassed");
	theList.push("gables");
	theList.push("habit");
	theList.push("habitual");
	theList.push("hobbit");
	theList.push("harsh");
	theList.push("harshness");
	theList.push("happen");
	theList.push("happening");
	theList.push("happened");
	theList.push("happens");
	theList.push("helps");
	theList.push("helping");
	theList.push("helpful");
	theList.push("helper");
	theList.push("helpfulness");
	theList.push("hotels");
	theList.push("hostels");
	theList.push("hostile");
	theList.push("hostility");
	theList.push("hopes");
	theList.push("hopeful");
	theList.push("hopefulness");
	theList.push("hoping");
	theList.push("hoped");
	theList.push("hopped");
	theList.push("hopping");
	theList.push("hops");
	theList.push("hateful");
	theList.push("hatefulness");
	theList.push("half");
	theList.push("halved");
	theList.push("hobble");
	theList.push("hobbling");
	theList.push("hobbled");
	theList.push("heaves");
	theList.push("heaving");
	theList.push("heaved");
	theList.push("heaven");
	theList.push("heavenly");
	theList.push("honest");
	theList.push("honestly");
	theList.push("holiday");
	theList.push("holidaying");
	theList.push("holidays");
	theList.push("hopscotch");
	theList.push("honour");
	theList.push("honourable");
	theList.push("honours");
	theList.push("honoured");
	theList.push("hoops");
	theList.push("hooped");
	theList.push("harden");
	theList.push("hardened");
	theList.push("hardening");
	theList.push("hovers");
	theList.push("hovering");
	theList.push("hovered");
	theList.push("indeed");
	theList.push("intent");
	theList.push("intended");
	theList.push("intending");
	theList.push("intends");
	theList.push("individual");
	theList.push("individually");
	theList.push("incredible");
	theList.push("invite");
	theList.push("invites");
	theList.push("invitation");
	theList.push("invited");
	theList.push("inviting");
	theList.push("intelligent");
	theList.push("intelligence");
	theList.push("intelect");
	theList.push("intelectual");
	theList.push("imitate");
	theList.push("imitating");
	theList.push("imitated");
	theList.push("imatation");
	theList.push("irritate");
	theList.push("irritation");
	theList.push("irritable");
	theList.push("irritated");
	theList.push("items");
	theList.push("insular");
	theList.push("insolvent");
	theList.push("intake");
	theList.push("intact");
	theList.push("impact");
	theList.push("impactful");
	theList.push("impacted");
	theList.push("impacting");
	theList.push("impractical");
	theList.push("internal");
	theList.push("internally");
	theList.push("international");
	theList.push("intentional");
	theList.push("icecream");
	theList.push("itchy");
	theList.push("itches");
	theList.push("itching");
	theList.push("identiy");
	theList.push("identify");
	theList.push("identified");
	theList.push("identifies");
	theList.push("identical");
	theList.push("identically");
	theList.push("ignores");
	theList.push("ignored");
	theList.push("ignoring");
	theList.push("ignorant");
	theList.push("ignorantly");
	theList.push("journey");
	theList.push("journeyed");
	theList.push("jokes");
	theList.push("joking");
	theList.push("joked");
	theList.push("jokingly");
	theList.push("jelly");
	theList.push("jammed");
	theList.push("jamming");
	theList.push("jammy");
	theList.push("jammed");
	theList.push("jasmine");
	theList.push("jaded");
	theList.push("javascript");
	theList.push("jaunty");
	theList.push("jauntily");
	theList.push("jazzy");
	theList.push("jingle");
	theList.push("jingles");
	theList.push("jingling");
	theList.push("jingled");
	theList.push("jockey");
	theList.push("jockeyed");
	theList.push("jockeying");
	theList.push("jogged");
	theList.push("jogger");
	theList.push("jogging");
	theList.push("jogged");
	theList.push("jodphurs");
	theList.push("joyful");
	theList.push("joyfully");
	theList.push("joyfulness");
	theList.push("joyless");
	theList.push("joylessly");
	theList.push("joystick");
	theList.push("knocked");
	theList.push("knocking");
	theList.push("knock");
	theList.push("knocks");
	theList.push("knocker");
	theList.push("koala");
	theList.push("kangaroo");
	theList.push("karate");
	theList.push("knight");
	theList.push("knighted");
	theList.push("knighthood");
	theList.push("knighting");
	theList.push("knitting");
	theList.push("knitted");
	theList.push("knitter");
	theList.push("knitwear");
	theList.push("knows");
	theList.push("knowing");
	theList.push("knowingly");
	theList.push("knowledge");
	theList.push("knuckle");
	theList.push("kicks");
	theList.push("kicked");
	theList.push("kicking");
	theList.push("kicker");
	theList.push("launch");
	theList.push("launches");
	theList.push("launched");
	theList.push("launcher");
	theList.push("launching");
	theList.push("limited");
	theList.push("limits");
	theList.push("limiting");
	theList.push("locate");
	theList.push("locations");
	theList.push("located");
	theList.push("locating");
	theList.push("locality");
	theList.push("loves");
	theList.push("loved");
	theList.push("loving");
	theList.push("lovely");
	theList.push("lazy");
	theList.push("lazier");
	theList.push("laziest");
	theList.push("lazily");
	theList.push("loyal");
	theList.push("lotalty");
	theList.push("loyalist");
	theList.push("ladies");
	theList.push("ladles");
	theList.push("ladled");
	theList.push("ladling");
	theList.push("liver");
	theList.push("little");
	theList.push("littlest");
	theList.push("littler");
	theList.push("litter");
	theList.push("littering");
	theList.push("littered");
	theList.push("later");
	theList.push("latest");
	theList.push("lately");
	theList.push("laboratory");
	theList.push("likes");
	theList.push("liked");
	theList.push("liking");
	theList.push("licks");
	theList.push("licked");
	theList.push("licking");
	theList.push("lavendar");
	theList.push("lullabye");
	theList.push("lavatory");
	theList.push("labour");
	theList.push("laborious");
	theList.push("liable");
	theList.push("likeable");
	theList.push("mother");
	theList.push("mothering");
	theList.push("method");
	theList.push("moisture");
	theList.push("misery");
	theList.push("miserable");
	theList.push("miserably");
	theList.push("mystical");
	theList.push("mythical");
	theList.push("mural");
	theList.push("monopoly");
	theList.push("market");
	theList.push("marketing");
	theList.push("marketed");
	theList.push("markets");
	theList.push("maddened");
	theList.push("maddening");
	theList.push("maddens");
	theList.push("maids");
	theList.push("muddle");
	theList.push("muddled");
	theList.push("muddling");
	theList.push("muddy");
	theList.push("muddiest");
	theList.push("middle");
	theList.push("mixer");
	theList.push("mixing");
	theList.push("mixes");
	theList.push("masked");
	theList.push("masks");
	theList.push("masking");
	theList.push("makes");
	theList.push("making");
	theList.push("mopeds");
	theList.push("motors");
	theList.push("maximise");
	theList.push("maximum");
	theList.push("mossy");
	theList.push("mossiest");
	theList.push("mouth");
	theList.push("mouthing");
	theList.push("mounts");
	theList.push("mounted");
	theList.push("mounting");
	theList.push("mountain");
	theList.push("mountains");
	theList.push("mountaineer");
	theList.push("mutiny");
	theList.push("mutinies");
	theList.push("mutineer");
	theList.push("multiply");
	theList.push("multiple");
	theList.push("minty");
	theList.push("mintiest");
	theList.push("mighty");
	theList.push("mightiest");
	theList.push("military");
	theList.push("militarily");
	theList.push("minute");
	theList.push("minutes");
	theList.push("nation");
	theList.push("national");
	theList.push("nationality");
	theList.push("nectar");
	theList.push("nursery");
	theList.push("nativity");
	theList.push("nocturnal");
	theList.push("nocturnally");
	theList.push("novel");
	theList.push("novels");
	theList.push("nanny");
	theList.push("nannies");
	theList.push("nine");
	theList.push("nineteen");
	theList.push("ninety");
	theList.push("never");
	theList.push("neither");
	theList.push("nutty");
	theList.push("nuttiest");
	theList.push("nobody");
	theList.push("natural");
	theList.push("naturally");
	theList.push("nature");
	theList.push("nosey");
	theList.push("nosiest");
	theList.push("nosier");
	theList.push("noise");
	theList.push("noises");
	theList.push("noisey");
	theList.push("noisiest");
	theList.push("noisier");
	theList.push("novelty");
	theList.push("novelties");
	theList.push("nagged");
	theList.push("nagging");
	theList.push("names");
	theList.push("named");
	theList.push("naming");
	theList.push("nameless");
	theList.push("napkin");
	theList.push("noses");
	theList.push("narration");
	theList.push("narrate");
	theList.push("narrated");
	theList.push("narrating");
	theList.push("narrates");
	theList.push("narrative");
	theList.push("narrow");
	theList.push("narrower");
	theList.push("narrowest");
	theList.push("nominate");
	theList.push("nominates");
	theList.push("nomination");
	theList.push("nominated");
	theList.push("nominating");
	theList.push("observe");
	theList.push("observing");
	theList.push("observer");
	theList.push("observed");
	theList.push("observes");
	theList.push("opposite");
	theList.push("opposes");
	theList.push("opposing");
	theList.push("opposed");
	theList.push("opponent");
	theList.push("origin");
	theList.push("original");
	theList.push("ordeal");
	theList.push("outcome");
	theList.push("opens");
	theList.push("opened");
	theList.push("opening");
	theList.push("oppress");
	theList.push("oppressive");
	theList.push("opresses");
	theList.push("operate");
	theList.push("operated");
	theList.push("operates");
	theList.push("operating");
	theList.push("octagon");
	theList.push("octagonal");
	theList.push("obscure");
	theList.push("opinion");
	theList.push("opinionated");
	theList.push("opinions");
	theList.push("ordered");
	theList.push("ordering");
	theList.push("order");
	theList.push("orders");
	theList.push("orderly");
	theList.push("olives");
	theList.push("olive");
	theList.push("oxygen");
	theList.push("oxidise");
	theList.push("oxidate");
	theList.push("occasion");
	theList.push("occasional");
	theList.push("occasionally");
	theList.push("obvious");
	theList.push("obviously");
	theList.push("oblige");
	theList.push("obligation");
	theList.push("offend");
	theList.push("offends");
	theList.push("offended");
	theList.push("offending");
	theList.push("offender");
	theList.push("passage");
	theList.push("passages");
	theList.push("pastime");
	theList.push("pause");
	theList.push("paused");
	theList.push("pauses");
	theList.push("pausing");
	theList.push("perform");
	theList.push("performed");
	theList.push("performs");
	theList.push("performing");
	theList.push("performers");
	theList.push("plunge");
	theList.push("plunges");
	theList.push("plunged");
	theList.push("plungers");
	theList.push("plunging");
	theList.push("predator");
	theList.push("predators");
	theList.push("predict");
	theList.push("predicts");
	theList.push("predicted");
	theList.push("predicting");
	theList.push("prediction");
	theList.push("predictions");
	theList.push("prevent");
	theList.push("prevents");
	theList.push("prevented");
	theList.push("preventing");
	theList.push("primary");
	theList.push("primaries");
	theList.push("privilege");
	theList.push("process");
	theList.push("processes");
	theList.push("processed");
	theList.push("processing");
	theList.push("practice");
	theList.push("practices");
	theList.push("practicing");
	theList.push("practiced");
	theList.push("polar");
	theList.push("polarity");
	theList.push("popular");
	theList.push("popularity");
	theList.push("people");
	theList.push("pompous");
	theList.push("pompously");
	theList.push("positive");
	theList.push("patent");
	theList.push("pamphlet");
	theList.push("queen");
	theList.push("quiet");
	theList.push("quietest");
	theList.push("quieter");
	theList.push("quits");
	theList.push("quitter");
	theList.push("quadrant");
	theList.push("quadrangle");
	theList.push("quarter");
	theList.push("quake");
	theList.push("query");
	theList.push("question");
	theList.push("questioned");
	theList.push("questions");
	theList.push("questioning");
	theList.push("questioner");
	theList.push("quality");
	theList.push("qualities");
	theList.push("qualify");
	theList.push("qualification");
	theList.push("quantity");
	theList.push("quantum");
	theList.push("quark");
	theList.push("quack");
	theList.push("qualifier");
	theList.push("quest");
	theList.push("quantify");
	theList.push("quantifies");
	theList.push("quantifying");
	theList.push("quantified");
	theList.push("rarity");
	theList.push("recall");
	theList.push("recalls");
	theList.push("recalled");
	theList.push("recalling");
	theList.push("relies");
	theList.push("relied");
	theList.push("relying");
	theList.push("relay");
	theList.push("relays");
	theList.push("relayed");
	theList.push("relaying");
	theList.push("really");
	theList.push("reality");
	theList.push("remark");
	theList.push("remarked");
	theList.push("remarking");
	theList.push("remarks");
	theList.push("remarkable");
	theList.push("resident");
	theList.push("residential");
	theList.push("respect");
	theList.push("respectful");
	theList.push("respected");
	theList.push("respects");
	theList.push("respecting");
	theList.push("responsible");
	theList.push("responsibly");
	theList.push("responsibility");
	theList.push("reason");
	theList.push("reasoned");
	theList.push("reasoning");
	theList.push("reasons");
	theList.push("reasonable");
	theList.push("roving");
	theList.push("rover");
	theList.push("reverse");
	theList.push("reverses");
	theList.push("reversed");
	theList.push("reversing");
	theList.push("reserved");
	theList.push("reserve");
	theList.push("reserves");
	theList.push("reserving");
	theList.push("reservation");
	theList.push("revive");
	theList.push("revived");
	theList.push("revives");
	theList.push("reviving");
	theList.push("risks");
	theList.push("risked");
	theList.push("risking");
	theList.push("risky");
	theList.push("riskier");
	theList.push("riskiest");
	theList.push("random");
	theList.push("randomness");
	theList.push("sixteen");
	theList.push("sixty");
	theList.push("scatter");
	theList.push("scatters");
	theList.push("scattering");
	theList.push("scattered");
	theList.push("schedule");
	theList.push("scheduled");
	theList.push("schedules");
	theList.push("scheduling");
	theList.push("sensitive");
	theList.push("signal");
	theList.push("signals");
	theList.push("signaled");
	theList.push("signaling");
	theList.push("singer");
	theList.push("singing");
	theList.push("songs");
	theList.push("solution");
	theList.push("spoil");
	theList.push("spoils");
	theList.push("spoiled");
	theList.push("spoiling");
	theList.push("starve");
	theList.push("starves");
	theList.push("starving");
	theList.push("starved");
	theList.push("steer");
	theList.push("steers");
	theList.push("steered");
	theList.push("steering");
	theList.push("struggle");
	theList.push("struggles");
	theList.push("struggling");
	theList.push("struggled");
	theList.push("suitable");
	theList.push("survey");
	theList.push("surveyed");
	theList.push("surveying");
	theList.push("seven");
	theList.push("seventeen");
	theList.push("seventy");
	theList.push("social");
	theList.push("society");
	theList.push("saved");
	theList.push("saving");
	theList.push("saves");
	theList.push("saver");
	theList.push("swallow");
	theList.push("swallowing");
	theList.push("swallows");
	theList.push("swallowed");
	theList.push("swallowing");
	theList.push("swims");
	theList.push("swimming");
	theList.push("talent");
	theList.push("talented");
	theList.push("talents");
	theList.push("treasure");
	theList.push("thrill");
	theList.push("thrills");
	theList.push("thrilled");
	theList.push("thrilling");
	theList.push("think");
	theList.push("thinking");
	theList.push("thinks");
	theList.push("thought");
	theList.push("teach");
	theList.push("teaching");
	theList.push("taught");
	theList.push("teachers");
	theList.push("teacher");
	theList.push("three");
	theList.push("tewlve");
	theList.push("thirteen");
	theList.push("twenty");
	theList.push("thirty");
	theList.push("total");
	theList.push("totals");
	theList.push("towing");
	theList.push("tower");
	theList.push("towers");
	theList.push("towering");
	theList.push("towered");
	theList.push("towel");
	theList.push("toweled");
	theList.push("trowel");
	theList.push("train");
	theList.push("trained");
	theList.push("trains");
	theList.push("training");
	theList.push("treasured");
	theList.push("triumph");
	theList.push("triumphant");
	theList.push("triumphing");
	theList.push("triumphs");
	theList.push("tourer");
	theList.push("touring");
	theList.push("tours");
	theList.push("toured");
	theList.push("tanks");
	theList.push("tanked");
	theList.push("thanked");
	theList.push("thanking");
	theList.push("thanks");
	theList.push("totter");
	theList.push("tottering");
	theList.push("underneath");
	theList.push("underside");
	theList.push("undone");
	theList.push("undoing");
	theList.push("undid");
	theList.push("universe");
	theList.push("universal");
	theList.push("unknown");
	theList.push("unknowable");
	theList.push("unintended");
	theList.push("unintentional");
	theList.push("underground");
	theList.push("unreasonable");
	theList.push("understanding");
	theList.push("understand");
	theList.push("understood");
	theList.push("understands");
	theList.push("umpire");
	theList.push("umpires");
	theList.push("umpired");
	theList.push("umpiring");
	theList.push("unwrap");
	theList.push("unwrapping");
	theList.push("unwrapped");
	theList.push("unwraps");
	theList.push("unity");
	theList.push("ugly");
	theList.push("uglier");
	theList.push("ugliest");
	theList.push("understudy");
	theList.push("uranium");
	theList.push("utility");
	theList.push("utilities");
	theList.push("unique");
	theList.push("unicycle");
	theList.push("united");
	theList.push("unites");
	theList.push("uniting");
	theList.push("ultimate");
	theList.push("ultimately");
	theList.push("umbrella");
	theList.push("umbrellas");
	theList.push("value");
	theList.push("values");
	theList.push("valued");
	theList.push("valuing");
	theList.push("valve");
	theList.push("valves");
	theList.push("vision");
	theList.push("visual");
	theList.push("volunteer");
	theList.push("voluntary");
	theList.push("volume");
	theList.push("variable");
	theList.push("variety");
	theList.push("variation");
	theList.push("victory");
	theList.push("victorious");
	theList.push("vicious");
	theList.push("viciously");
	theList.push("viciousness");
	theList.push("vague");
	theList.push("vaguely");
	theList.push("vaguest");
	theList.push("vanguard");
	theList.push("vanquish");
	theList.push("vacuum");
	theList.push("vacuums");
	theList.push("vacuumed");
	theList.push("vacuuming");
	theList.push("vegetable");
	theList.push("vegetables");
	theList.push("vampire");
	theList.push("vampires");
	theList.push("vampirism");
	theList.push("vanity");
	theList.push("vapour");
	theList.push("vapourise");
	theList.push("valet");
	theList.push("valets");
	theList.push("vector");
	theList.push("week");
	theList.push("weak");
	theList.push("weakness");
	theList.push("wander");
	theList.push("wanders");
	theList.push("wandering");
	theList.push("wanderer");
	theList.push("wonder");
	theList.push("wonders");
	theList.push("wondering");
	theList.push("wondered");
	theList.push("wobble");
	theList.push("wobbly");
	theList.push("wobbliest");
	theList.push("wobbles");
	theList.push("wobbled");
	theList.push("waved");
	theList.push("waves");
	theList.push("waving");
	theList.push("wisdom");
	theList.push("woeful");
	theList.push("woefulness");
	theList.push("witch");
	theList.push("witches");
	theList.push("witchcraft");
	theList.push("warded");
	theList.push("warding");
	theList.push("wearing");
	theList.push("warlock");
	theList.push("warlocks");
	theList.push("weather");
	theList.push("weatherman");
	theList.push("weathermap");
	theList.push("wellington");
	theList.push("weekly");
	theList.push("wilful");
	theList.push("wilfully");
	theList.push("wilfulness");
	theList.push("watch");
	theList.push("watched");
	theList.push("watching");
	theList.push("watchful");
	theList.push("watchfulness");
	theList.push("washing");
	theList.push("washes");
	theList.push("washers");
	theList.push("washed");
	theList.push("wasted");
	theList.push("wasteful");
	theList.push("xray");
	theList.push("xenon");
	theList.push("xenophobic");
	theList.push("xenophobia");
	theList.push("xylophone");
	theList.push("young");
	theList.push("younger");
	theList.push("youngest");
	theList.push("youth");
	theList.push("youths");
	theList.push("youthful");
	theList.push("youthfulness");
	theList.push("yellow");
	theList.push("yellower");
	theList.push("yellowest");
	theList.push("yawns");
	theList.push("yawned");
	theList.push("yawning");
	theList.push("yells");
	theList.push("yelled");
	theList.push("yelling");
	theList.push("yelps");
	theList.push("yelped");
	theList.push("yelping");
	theList.push("yesterday");
	theList.push("yields");
	theList.push("yielded");
	theList.push("yielding");
	theList.push("yoghurt");
	theList.push("yoghurts");
	theList.push("zebra");
	theList.push("zebras");
	theList.push("zany");
	theList.push("zanier");
	theList.push("zaniest");
	theList.push("zapped");
	theList.push("zapper");
	theList.push("zapping");
	theList.push("zealot");
	theList.push("zealotry");
	theList.push("zero");
	theList.push("zeroes");
	theList.push("zigzag");
	theList.push("zipping");
	theList.push("zipped");
	theList.push("zippier");
	theList.push("zippiest");
	theList.push("zombie");
	theList.push("zombies");
	theList.push("zombified");
	theList.push("zones");
	theList.push("zoned");
	theList.push("zoning");
	theList.push("zookeeper");
	theList.push("zoos");
	theList.push("zoological");
	theList.push("zoom");
	theList.push("zooms");
	theList.push("zooming");
	theList.push("zoomed");
	//Return the array of words
	return(theList);
}
/*===============================================================================================*/